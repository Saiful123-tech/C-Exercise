Q1 Given a List of Customers with thier orders write a linq query to find the total amount spent by each customers
 List<Customer> customers = new List<Customer>()
            {
                new Customer()
                {
                    Name = "Saiful",
                    Orders = new List<Order>()
                    {
                        new Order()
                        {
                            Product =  "lloyd",
                            Price = 20000
                        },
                         new Order()
                        {
                            Product =  "Samsung TV",
                            Price = 3000
                        },
                         new Order()
                         {
                             Product = "Telephone",
                             Price = 27748
                         }
                    }

                },
                new Customer()
                {
                    Name = "Danish",
                    Orders = new List<Order>()
                    {
                        new Order()
                        {
                            Product =  "lloyd",
                            Price = 20000
                        },
                         new Order()
                         {
                             Product = "Telephone",
                             Price = 27748
                         }
                    }

                },
                  new Customer()
                {
                    Name = "Raman",
                    Orders = new List<Order>()
                    {
                        new Order()
                        {
                            Product =  "lloyd",
                            Price = 20000
                        },
                         new Order()
                         {
                             Product = "Telephone",
                             Price = 27748
                         },
                         new Order()
                         {
                             Product = "Telephone",
                             Price = 27748
                         },
                         new Order()
                         {
                             Product = "Telephone",
                             Price = 27748
                         }
                    }

                }

            };
            var result = customers.Select(c => new
            {
                Name = c.Name,
                totalPrice  = c.Orders.Sum(x => x.Price)
               
            });

            foreach (var customer in result)
            {
                Console.WriteLine(customer.Name  + " " + customer.totalPrice);

            }
            Console.ReadLine();


Q2 Given a list of Products with thier categories, write a Linq query to find the number of products in each category

 List<ProductCategory> categories = new List<ProductCategory>()
            {
                new ProductCategory
                {
                    categoryName = "Electronics",
                    products = new List<Product>
                    {
                       new Product()
                       {
                           ProductId = 1,
                           ProductName = "Samsung",
                           ProductPrice = 4500
                       },
                       new Product()
                       {
                           ProductId = 2,
                           ProductName = "LGTV",
                           ProductPrice = 32999
                       },
                       new Product()
                       {
                           ProductId = 3,
                           ProductName = "Onion1",
                           ProductPrice = 433999
                       }
                    }
                },
                new ProductCategory()
                {
                    categoryName = "Mobile",
                    products = new List<Product>()
                    {
                        new Product()
                        {
                            ProductId = 2,
                            ProductName = "Iphone",
                            ProductPrice = 28900
                        },
                        new Product()
                        {
                            ProductId = 3,
                            ProductName = "RealMe",
                            ProductPrice = 330000
                        },
                        new Product()
                        {
                            ProductId = 4,
                            ProductName = "Redmi",
                            ProductPrice = 330000
                        },
                         new Product()
                        {
                            ProductId = 5,
                            ProductName = "Nokia",
                            ProductPrice = 330000
                        }
                    }

                }
            };

            var results = categories.Select(c =>
           new
           {
               CategoryName = c.categoryName,
               productCount = c.products.Count()
           });
            foreach(var item in results)
            {
                Console.WriteLine(item.CategoryName + " " + item.productCount);
            }
            Console.ReadLine();

Q3 Given a list of strings write a Linq query to find all string that containes substring

List<string> names = new List<string>()
            {
                "Saiful","Saman","Naman","Rohit","Rohan"
            };

            var results = names.Where(x => x.Contains("an")).ToList();
            foreach(var item in results)
            {
                Console.WriteLine(item.ToString());
            }
            Console.ReadLine();

Q4 Join Concept 
`
 List<Product> studentList = new List<Product>()
            {
                new Product(){ ProductId =1,ProductName = "Samsung",ProductPrice = 500,DepartmentId = 1},
                new Product(){ ProductId =2,ProductName = "Nokia",ProductPrice = 430,DepartmentId = 2},
                new Product(){ ProductId =3,ProductName = "Tea",ProductPrice = 230,DepartmentId = 3},
                new Product(){ ProductId =4,ProductName = "Sony",ProductPrice = 700,DepartmentId = 1},
                new Product(){ ProductId =5,ProductName = "Qualcom",ProductPrice = 600,DepartmentId = 2},
                new Product(){ ProductId =6,ProductName = "Samsung",ProductPrice = 500, DepartmentId = 3},
                new Product(){ ProductId =7,ProductName = "Nokia",ProductPrice = 430,DepartmentId = 1},
                new Product(){ ProductId =8,ProductName = "Tea",ProductPrice = 230, DepartmentId = 2},
                new Product(){ ProductId =9,ProductName = "Sony",ProductPrice = 700,DepartmentId = 1},
                new Product(){ ProductId =10,ProductName = "Qualcom",ProductPrice = 600, DepartmentId = 3},
            };
            List<Department> department = new List<Department>()
            {
                new Department(){ Id = 1,DepartmentName = "telephone"},
                new Department(){Id = 2,DepartmentName = "Food"},
                new Department(){Id = 3, DepartmentName = "Electronic"}
            };

Join by Extension Method

            var result = studentList.Join(department, student => student.DepartmentId, dept => dept.Id, (student, department) =>
            new
            {
                studentName = student.ProductName,
                departmentName = department.DepartmentName
            }).OrderBy(x => x.studentName).ToList();
            foreach (var items in result)
            {
                Console.WriteLine(items.studentName + " " + items.departmentName);
            }


Join by Query 
 var joinresults = from std in studentList
                              join dept in department on std.DepartmentId equals dept.Id orderby std.ProductName
                              select new
                              {
                                  productName = std.ProductName,
                                  departmentName = dept.DepartmentName
                              };

Group by 
 var result = from student in studentList orderby student.ProductName group student by student.DepartmentId;
            foreach(var item in result)
            {
               Console.WriteLine(item.Key);
                foreach(var res in item)
                {
                    Console.WriteLine(res.ProductName);
                }
            }

Group by first Capital letter
 var result = from student in studentList orderby student.ProductName group student by student.studentName[0];
            foreach(var item in result)
            {
               Console.WriteLine(item.Key);
                foreach(var res in item)
                {
                    Console.WriteLine(res.studentName);
                }
            }

var result = studentList.OrderBy(x => x.ProductName).GroupBy(x => x.DepartmentId).ToList();

Sum() Method

List<int> listNumbers = new List<int>() { 1, 2, 3, 5, 6, 7 };
            var result = listNumbers.Sum();
            Console.WriteLine(result);

Distinct() Method

List<int> listNumbers = new List<int>() { 1, 2, 3, 5, 6, 7,1,8,5};
            var result = listNumbers.Distinct();
            foreach(var item in result)
            {
                Console.WriteLine(item);
            }

Union() Method 
List<int> listNumbers = new List<int>() { 1, 2, 3, 5, 6, 7,1,8,5};
            List<int> secondNumbers = new List<int>() { 1, 2, 3 };
            var result = listNumbers.Union(secondNumbers).ToList();
            foreach(var item in result)
            {
                Console.WriteLine(item);
            }

Intersect Method()

  List<int> listNumbers = new List<int>() { 1, 2, 3, 5, 6, 7,1,8,5};
            List<int> secondNumbers = new List<int>() { 1, 2, 3 };
            var result = listNumbers.Intersect(secondNumbers).ToList();
            foreach(var item in result)
            {
                Console.WriteLine(item);
            }
1,2,3

Except Method() reverse hai Intersect Method
 List<int> listNumbers = new List<int>() { 1, 2, 3, 5, 6, 7,1,8,5};
            List<int> secondNumbers = new List<int>() { 1, 2, 3 };
            var result = listNumbers.Except(secondNumbers).ToList();
            foreach(var item in result)
            {
                Console.WriteLine(item);
            }
5,6,7,8


Max() Mehtod
 List<int> listNumbers = new List<int>() { 1, 2, 3, 5, 6, 7,1,8,5};
            List<int> secondNumbers = new List<int>() { 1, 2, 3 };
            var result = listNumbers.Max();
            Console.WriteLine(result);

Min() Method

 List<int> listNumbers = new List<int>() { 1, 2, 3, 5, 6, 7,1,8,5};
            List<int> secondNumbers = new List<int>() { 1, 2, 3 };
            var result = listNumbers.Min();
            Console.WriteLine(result);

Average() Method 
List<int> listNumbers = new List<int>() { 1, 2, 3, 5, 6, 7,1,8,5};
            List<int> secondNumbers = new List<int>() { 1, 2, 3 };
            var result = listNumbers.Average();


Aggregate Functiion

 List<int> listNumbers = new List<int>() { 1, 2, 3, 5, 6, 7,1,8,5};
            List<int> secondNumbers = new List<int>() { 1, 2, 3 };
            var result = listNumbers.Aggregate((accumulate, current) => accumulate + current);
            Console.WriteLine(result);

All Method()
 List<int> listNumbers = new List<int>() { 1, 2, 3, 5, 6, 7,1,8,5};
            List<int> secondNumbers = new List<int>() { 1, 2, 3 };
            var result = listNumbers.All(x => x % 2 == 0);
Ans False

Any() Method
 List<int> listNumbers = new List<int>() { 1, 2, 3, 5, 6, 7,1,8,5};
            List<int> secondNumbers = new List<int>() { 1, 2, 3 };
            var result = listNumbers.Any(x => x % 2 == 0);
            Console.WriteLine(result);

Ans True

Partioning Operator

 List<int> numbers = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
            // Take the first 5 numbers
            IEnumerable<int> firstFive = numbers.Take(5);
            // Take numbers while they are less than 6
            IEnumerable<int> lessThanSix = numbers.TakeWhile(n => n < 6);
            // Skip the first 5 numbers
            IEnumerable<int> skipFirstFive = numbers.Skip(5);
            // Skip numbers while they are less than 6
            IEnumerable<int> skipLessThanSix = numbers.SkipWhile(n => n < 6);
            // Display the results
            Console.WriteLine("First Five: " + string.Join(", ", firstFive));
            Console.WriteLine("Less Than Six: " + string.Join(", ", lessThanSix));
            Console.WriteLine("Skip First Five: " + string.Join(", ", skipFirstFive));
            Console.WriteLine("Skip Less Than Six: " + string.Join(", ", skipLessThanSix));
            Console.ReadKey();
        }
    }
}
Output:
First Five 1,2,3,4,5
Less Than Six 1,2,3,4,5
SkipFirstFive 6,7,8,9,10
slipLessThanSix 6,7,8,9

Select vs SelectMany
Select operator: this operator is widely used, and it is used to get value from the collection, which we can use for custom results depending on our requirements.
SelectMany operator: This operator is used to get value from collections of collections.
 List<Player> playerList = new List<Player>()
            {
              new Player() {
        Id = 1001, Name = "Player1", CategoryId = 1, Skills = new List < string > {
          "Bat",
          "Bowl"
        }
      },

      new Player() {
        Id = 1002, Name = "Player2", CategoryId = 1, Skills = new List < string > {
          "Bat",
          "Bowl",
          "Keeper"
        }
      },

      new Player() {
        Id = 1003, Name = "Player3", CategoryId = 2, Skills = new List < string > {
          "Bat",
          "Bowl",
          "Keeper"

        }
      },

      new Player() {
        Id = 1004, Name = "Player4", CategoryId = 3, Skills = new List < string > {
          "Bowl",
        }
      },
      new Player() {
        Id = 1005, Name = "Player5", CategoryId = 3, Skills = new List < string > {
          "Bat",
          "Bowl"
        }
      },
      new Player() {
        Id = 1006, Name = "Player6", CategoryId = 3, Skills = new List < string > {
          "Bat",
          "Bowl",
          "Keeper"
        }
            }
            };

Select 
var result = playerList.Select(x => x.Skills).ToList();
            foreach(var item in result)
            {
                Console.WriteLine(item);
            }
Return System.String
This is not right answer now to use selectMany
Now will use Select Many
            var result = playerList.SelectMany(x => x.Skills).ToList();
            foreach(var item in result)
            {
                Console.WriteLine(item);
            }

GroupJoin
IList<Student> studentList = new List<Student>() { 
    new Student() { StudentID = 1, StudentName = "John", StandardID =1 },
    new Student() { StudentID = 2, StudentName = "Moin", StandardID =1 },
    new Student() { StudentID = 3, StudentName = "Bill", StandardID =2 },
    new Student() { StudentID = 4, StudentName = "Ram",  StandardID =2 },
    new Student() { StudentID = 5, StudentName = "Ron" } 
};

IList<Standard> standardList = new List<Standard>() { 
    new Standard(){ StandardID = 1, StandardName="Standard 1"},
    new Standard(){ StandardID = 2, StandardName="Standard 2"},
    new Standard(){ StandardID = 3, StandardName="Standard 3"}
};

var groupJoin = standardList.GroupJoin(studentList,  //inner sequence
                                std => std.StandardID, //outerKeySelector 
                                s => s.StandardID,     //innerKeySelector
                                (std, studentsGroup) => new // resultSelector 
                                {
                                    Students = studentsGroup,
                                    StandarFulldName = std.StandardName
                                });

foreach (var item in groupJoin)
{ 
    Console.WriteLine(item.StandarFulldName );

    foreach(var stud in item.Students)
        Console.WriteLine(stud.StudentName);
}
